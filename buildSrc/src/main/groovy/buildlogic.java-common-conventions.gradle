/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id 'java'
    // Code quality
    id 'com.diffplug.spotless'
    id 'com.github.spotbugs'
    id 'checkstyle'
    id 'pmd'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    constraints {
        // Define dependency versions as constraints
        implementation 'org.apache.commons:commons-text:1.11.0'
    }

    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.10.2'

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

checkstyle {
    toolVersion = '10.15.0'
    configProperties = [
            'org.checkstyle.java.jdkversion': '17'
    ]
}

spotless {
    java {
        target 'src/**/*.java'

        // Google Java Format
        googleJavaFormat('1.22.0').aosp().reflowLongStrings()

        // Remove unused imports
        removeUnusedImports()

        // License header
        licenseHeader '/*\n * My Project\n */\n\n'

        // End with newline
        endWithNewline()
    }

    kotlinGradle {
        target '*.gradle.kts'
        ktlint()
    }

    format 'misc', {
        target '*.md', '.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}

spotbugs {
    toolVersion = '4.8.3'
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'low'
}

tasks.withType(com.github.spotbugs.snom.SpotBugsTask) { task ->
    reports {
        html {
            enabled = true
            destination = file("$buildDir/reports/spotbugs/spotbugs.html")
        }
        xml {
            enabled = false
        }
    }

    // Exclude generated code or test files if needed
    if (file("${project.rootDir}/config/spotbugs/exclude.xml").exists()) {
        excludeFilter = file("${project.rootDir}/config/spotbugs/exclude.xml")
    }
}

// Add these to the existing check task dependencies
tasks.named('check') {
    dependsOn tasks.spotlessCheck
    dependsOn tasks.spotbugsMain
    dependsOn tasks.checkstyleMain
    dependsOn tasks.pmdMain
}

tasks.named('build') {
    dependsOn tasks.spotlessApply
}
